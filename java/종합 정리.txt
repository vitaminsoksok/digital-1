 변수
 - 변수 선언 방법
 int num1;
 - 자료형
 char 2바이트
 - 변수명 작성 규칙/권고사항(관례)
 1. 예약어 불가능
 2. 특수문자 _와 $만 가능
 3. 숫자가 첫글자로 올수 없음
 4. 중복 선언이 불가능 : 변수 사용 범위가 겹치는 부분이 생길때
 5. 대소문자를 구별
 - 일반 변수 : 값을 저장하는 변수
 - 참조 변수 : 주소를 저장하는 변수(배열, 객체)
 - 멤버 변수 : 클래스의 멤버 변수는 클래스 내의 메소드에서 사용 가능한 변수
 - 지역 변수 : 변수를 선언한 지역에서만 사용한 변수
 - 객체 멤버 변수    : static x, 객체 각각이 가지고 있는 변수
 - 클래스 멤버 변수 : static o, 클래스가 가지고 있는 변수로 모든 객체가 공유
 - 매개변수 : 메소드를 실행하기 위해 필요한 정보를 담고 있는 변수

 ---- 필요한 데이터를 관리하기 위한 변수를 선언할 수 있다. ----

 연산자
 - 산술 : / , %
  - 0으로 나눌 수 없다 => Exception
 - 비교 : 크기 비교
  - 결과값이 참 또는 거짓
 - 논리 
  - && : ~하고
  - || : ~하거나
  num >= 10
  num > 10 || num == 10
  - ! : ~아닌, 반대
 - 조건식 : 결과값이 참 또는 거짓이 되는 식
 - 증감 : ++, --
 - 대입 : =
 - 결합 : +=, -=
   A = A + B; 
   A+=B;
 - 조건선택연산자 : 조건에 따른 결과가 달라지는 경우 사용
  (조건식)?A : B;
 
 ---- 연산자 종류에 따른 결과를 예측할 수 있다. ----
 ---- 주어진 문제를 해결하기 위해 연산자를 활용할 수 있다. ----

 조건문
 - if문, switch문
 - ~하면 ...한다
 - ~ : 조건식, ... : 실행문
 - if문
 - 조건식1이 참이면 실행문1을 실행하고, 조건식1이 거짓이고 조건식2가 참이면 실행문2를 실행하고, 조건식1과 조건식2가 거짓이면 실행문3을 실행
 if(조건식1){
	실행문1;
 }else if(조건식2){
	실행문2;
 }else{
	실행문3;
 }
 - switch문
 - 사용하는 변수의 값이 제한적일 때
 switch(변수){
 case 값1:
	실행문1;
	break;
 case 값2:	
	실행문2;
	break;
 default:
	실행문3;
 }

 반복문
 - 규칙적인 작업을 반복적으로 할 때 사용
 for(초기화 ; 조건식 ; 증감연산){
	실행문;
 }

 while(조건식){
	실행문;
 }

 do{
	실행문;
 }while(조건식);

 배열
 - new 연산자를 이용
 - 시작번지는 0번지

 메소드
 - 기능
 - 매개변수 : 메소드를 실행하기 위해 필요한 필수 정보
 - 리턴타입 : 메소드를 실행하고 난 후 알려주는 정보
 - 메소드명 : 의미있게, 메소드명만 보고 기능을 유추할 수 있도록
 - 메소드 오버로딩 : 동일한 메소드명이 여러개인 경우
   1. 매개변수의 갯수가 다름
   2. 매개변수의 타입이 다름

 클래스(설계도)
 - 멤버 변수(정보), 멤버 메소드(기능), 생성자
 - 객체(제품)
 Point p;//Point 클래스의 참조변수 p
 Point p = new Point(); //Point 클래스를 이용하여 생성된 객체 p
 - new를 통해 객체를 생성
 - 생성자 : 멤버 변수 초기화
  - 생성자의 이름은 클래스명과 동일
  - 리턴타입이 존재하지 않는다(생략한다)
  - 생성자 오버로딩을 통해 다양한 생성자를 제공한다
 - 접근제한자
  - public > protected > default > private
 
 상속
 - 부모클래스를 물려 받는 것
 - 편하려고
 - 오버라이딩 : 부모클래스에게 물려받은 메소드를 재정의것
  - 부모클래스의 메소드와 동일
 - extends
 - 최고 조상은 Object
 - 클래스의 상속은 부모가 하나, 인터페이스 상속은 여러명이 가능

 인터페이스
 - 추상 메소드와 static 상수로 이루어진 것
 - 추상 메소드는 구현이 없는 메소드
 - 표준화

 관련클래스들
 - String, Math, Date, Calendar 등

 컬렉션프레임웍
 - List, Set, Map
 - List : 중복 가능, 순서 보장, 원하는 번지에 있는 정보를 가져올 수 있다
 - Set : 중복 불가능, 순서 보장 x
 - List와 Set은 Iterator를 이용하여 값을 가져올 수 있다
 - List와 Set은 하나의 정보를 다룬다
 - Map은 key와 value라는 두개의 정보를 다룬다.
 - key는 중복 불가, map는 중복 가능
 - Map과 Set에서 중복 여부는 equals()메소드로 판별한다

map.put("학생", new Student());
map.put("부모", new Parent());
 










































 





















































